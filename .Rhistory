group_by(taxon_name) %>%
summarize(max_max_height=max(as.numeric(value),na.rm=T),mean_max_height=mean(as.numeric(value),na.rm=T)) -> trait1a
#see which species are in Austraits, but have no data for this trait
check<-data.frame(trait1$taxon_name)
check<-check %>%
rename(
taxon_name = trait1.taxon_name
)
APC_sp <-dplyr::select(sl, taxon_name)
y <- setdiff(APC_sp, check)
View(y)
#for almost all of the species missing height data here, I took measurements at Duck River. Added those externally, plus one from looking up online
height_append<- read_csv("data/height_append_persist2.csv")
View(height_append)
View(y)
View(sl)
list <- read_csv("species_list.csv")
sl<-dplyr::filter(list, mesaglio_2024 == "yes")
spvector <- sl$taxon_name
#first is maximum plant height
#all field adult records
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "plant_height") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen") & #preserved specimen is flora data
value_type=="maximum") -> trait1
# mean and max height by species
trait1 %>%
group_by(taxon_name) %>%
summarize(max_max_height=max(as.numeric(value),na.rm=T),mean_max_height=mean(as.numeric(value),na.rm=T)) -> trait1a
#see which species are in Austraits, but have no data for this trait
check<-data.frame(trait1$taxon_name)
check<-check %>%
rename(
taxon_name = trait1.taxon_name
)
APC_sp <-dplyr::select(sl, taxon_name)
y <- setdiff(APC_sp, check)
View(y)
#for almost all of the species missing height data here, I took measurements at Duck River. Added those externally, plus one from looking up online
height_append<- read_csv("data/height_append_persist2.csv")
View(height_append)
pre_master <-dplyr::select(trait1a, taxon_name, max_max_height)
master1 <-dplyr::bind_rows(pre_master, height_append)
View(master1)
View(master1)
#correct error for Lobelia purpurascens
master1[130, 2] = 0.28
#change mistletoe heights to NA
master1a <- master1 %>%
mutate(max_max_height=ifelse(taxon_name=="Muellerina eucalyptoides",NA,max_max_height),
max_max_height=ifelse(taxon_name=="Amyema miquelii",NA,max_max_height))
View(master1a)
#now let's do dispersal syndrome
#all field adult records
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "dispersal_syndrome") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait2
#remove Draper study (too many species scored from broad family/genus values)
trait2x<-dplyr::filter(trait2, dataset_id != "Draper_2023")
#dispersal syndrome by species
trait2x %>%
group_by(taxon_name) %>%
summarize(dispersal=value) ->trait2a
#see which species are in Austraits, but have no data for this trait
check2<-data.frame(trait2$taxon_name)
check2<-check2 %>%
rename(
taxon_name = trait2.taxon_name
)
y2 <- setdiff(APC_sp, check2)
#first though, write up the csv for this trait so I can manually collapse rows (multiple values for same species)
write_csv(trait2a,"data/dispersal_syndrome_persist.csv")
#for missing species, extract all values for the trait, and then can search for the relevant genera in the dataframe
disp1 <- extract_trait(`austraits-6.0.0`, "dispersal_syndrome")
disp2<-(disp1$traits)
View(y2)
View(trait2x)
View(y2)
View(APC_sp)
#now let's do dispersal syndrome
#all field adult records
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "dispersal_syndrome") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait2
#remove Draper study (too many species scored from broad family/genus values)
trait2x<-dplyr::filter(trait2, dataset_id != "Draper_2023")
#dispersal syndrome by species
trait2x %>%
group_by(taxon_name) %>%
summarize(dispersal=value) ->trait2a
#see which species are in Austraits, but have no data for this trait
check2<-data.frame(trait2$taxon_name)
check2<-check2 %>%
rename(
taxon_name = trait2.taxon_name
)
View(trait2a)
View(APC_sp)
View(y2)
View(trait1a)
View(y2)
View(trait2x)
View(trait2a)
View(trait2x)
View(disp2)
dispersalv2 <- read_csv("data/dispersal_syndrome_persist_updated.csv")
master2 <-dplyr::left_join(master1a, dispersalv2, by = "taxon_name")
View(master2)
dispersalv2 <- read_csv("data/dispersal_syndrome_persist_updated.csv")
master2 <-dplyr::left_join(master1a, dispersalv2, by = "taxon_name")
View(master2)
View(trait2x)
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "plant_growth_form") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait3
#this trait is a fully curated one (Wenk_2022), so we'll filter to that
trait3x<-dplyr::filter(trait3, dataset_id=="Wenk_2022")
#habit by species
trait3x %>%
group_by(taxon_name) %>%
summarize(growth_habit=value) ->trait3a
#see which species are in Austraits, but have no data for this trait
check3<-data.frame(trait3x$taxon_name)
check3<-check3 %>%
rename(
taxon_name = trait3x.taxon_name
)
y3 <- setdiff(APC_sp, check3) #just one missing (was only accepted by APC recently, hence not in Wenk_2022)
View(y3)
#first though, write up the csv for this trait so I can manually collapse multiple values for same species
write_csv(trait3a,"data/growth_form_persist.csv")
#read back in
formv2 <- read_csv("data/growth_form_persist_updated.csv")
master3 <-dplyr::left_join(master2, formv2, by = "taxon_name")
View(master3)
#now life_history
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "life_history") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait4
#this trait is a fully curated one (Wenk_2023), so we'll filter to that
trait4x<-dplyr::filter(trait4, dataset_id=="Wenk_2023")
#life history by species
trait4x %>%
group_by(taxon_name) %>%
summarize(life_history=value) ->trait4a
#see which species are in Austraits, but have no data for this trait
check4<-data.frame(trait4x$taxon_name)
check4<-check4 %>%
rename(
taxon_name = trait4x.taxon_name
)
y4 <- setdiff(APC_sp, check4)
#first though, write up the csv for this trait
write_csv(trait4a,"data/life_history_persist.csv")
View(y4)
View(trait4x)
View(trait4x)
#read back in
historyv2 <- read_csv("data/life_history_persist_updated.csv")
master4 <-dplyr::left_join(master3, historyv2, by = "taxon_name")
#next is photosynthetic pathway
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "photosynthetic_pathway") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait5
#photosynthesis by species
trait5 %>%
group_by(taxon_name) %>%
summarize(photosynthetic_pathway=value) ->trait5a
#see which species are in Austraits, but have no data for this trait
check5<-data.frame(trait5$taxon_name)
check5<-check5 %>%
rename(
taxon_name = trait5.taxon_name
)
y5 <- setdiff(APC_sp, check5)
#first though, write up the csv for this trait so I can manually collapse rows (multiple values for same species)
write_csv(trait5a,"data/photosynthesis_persist.csv")
View(y5)
#read back in
photov2 <- read_csv("data/photosynthesis_persist_updated.csv")
master5 <-dplyr::left_join(master4, photov2, by = "taxon_name")
#fire response
(`austraits-6.0.0` %>% join_all)$traits %>%
filter(taxon_name %in% spvector) %>%
filter(trait_name == "resprouting_capacity") %>%
filter(life_stage=="adult" &
basis_of_record %in% c("field","literature","literature field","preserved_specimen"))-> trait6
#fire by species
trait6 %>%
group_by(taxon_name) %>%
summarize(resprouting_capacity=value) ->trait6a
#see which species are in Austraits, but have no data for this trait
check6<-data.frame(trait6$taxon_name)
check6<-check6 %>%
rename(
taxon_name = trait6.taxon_name
)
y6 <- setdiff(APC_sp, check6)
#first though, write up the csv for this trait so I can manually collapse rows (multiple values for same species)
write_csv(trait6a,"data/fire_persist.csv")
View(y6)
View(trait6a)
View(y6)
firev2 <- read_csv("data/fire_persist_updated.csv")
master6 <-dplyr::left_join(master5, firev2, by = "taxon_name")
View(master6)
water <- read_csv("water_persist.csv")
water <- read_csv("data/water_persist.csv")
master7 <-dplyr::left_join(master6, water, by = "taxon_name")
View(master7)
master8<-dplyr::left_join(master7, sl, by = "taxon_name")
master9<-master8[,c(1,9,10,11,2,3,4,5,6,7,8)]
View(master9)
write_csv(master9,"data/persist_natives_master_traits.csv")
extinct <- read_csv("data/extinct_natives_master_traits.csv")
persist <- read_csv("data/persist_natives_master_traits.csv")
extinct <- read_csv("data/extinct_natives_master_traits.csv")
persist <- read_csv("data/persist_natives_master_traits.csv")
#add a new column for each (extinct or persist)
extinct['status']='extinct'
persist['status']='persister'
View(extinct)
#combine df
combined <- dplyr::bind_rows(extinct, persist)
combined<-dplyr::arrange(combined, status)
View(combined)
#tidy up some other column headings etc
combined <- dplyr::rename(combined, "maximum_height_metres" = max_max_height)
combined <- dplyr::rename(combined, "dispersal_syndrome" = dispersal)
combined <- dplyr::rename(combined, "fire_response" = resprouting_capacity)
#write
write_csv(combined,"data/final_master_list.csv")
#t-test height
#first check data distribution
hist(combined$maximum_height_metres)
t.test(maximum_height_metres ~ status, data = combined, var.equal = TRUE)
#heavily right skewed, so log transform first
combined <- dplyr::mutate(combined, log_height = log(maximum_height_metres))
t.test(log_height ~ status, data = combined, var.equal = TRUE)
#chi square tests for traits
cont_table1 <- table(combined$dispersal_syndrome, combined$status)
chisq_result1 <- chisq.test(cont_table1)
cont_table2 <- table(combined$growth_habit, combined$status)
chisq_result2 <- chisq.test(cont_table2)
cont_table3 <- table(combined$life_history, combined$status)
chisq_result3 <- chisq.test(cont_table3)
cont_table4 <- table(combined$photosynthetic_pathway, combined$status)
chisq_result4 <- chisq.test(cont_table4)
cont_table5 <- table(combined$fire_response, combined$status)
chisq_result5 <- chisq.test(cont_table5)
cont_table6 <- table(combined$water_association, combined$status)
chisq_result6 <- chisq.test(cont_table6)
#plot these
library(ggstatsplot)
library(ggplot2)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
p1 <- ggbarstats(
data = combined,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p1
extract_stats(p1)
p2<-ggbarstats(
data = combined,
x = growth_habit,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p2
extract_stats(p2)
p3<-ggbarstats(
data = combined,
x = life_history,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p3
extract_stats(p3)
p4<-ggbarstats(
data = combined,
x = photosynthetic_pathway,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p4
extract_stats(p4)
p5<-ggbarstats(
data = combined,
x = fire_response,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p5
extract_stats(p5)
p6<-ggbarstats(
data = combined,
x = water_association,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p6
extract_stats(p6)
disp2 <- read_csv("data/final_master_list2.csv")
p7 <- ggbarstats(
data = disp2,
x = dispersal_coarse,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p7
extract_stats(p7)
#filter just to biotic
disp3 <-dplyr::filter(disp2, dispersal_coarse == "biotic")
#also, remove the rows that are only annotated as zoochory, so we are left with the three key specific values (myrmeco, epizoo, endozoo)
disp3x<-dplyr::filter(disp3, dispersal_syndrome != "zoochory")
p8 <- ggbarstats(
data = disp3x,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p8
extract_stats(p8)
#now just abiotic instead
disp4 <-dplyr::filter(disp2, dispersal_coarse == "abiotic")
p9 <- ggbarstats(
data = disp4,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p9
extract_stats(p9)
#growth habit
M <- as.table(rbind(c(4, 4, 9, 29, 37, 0, 2, 1), c(35, 4, 48, 68, 43, 4, 5, 7)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("tree","subshrub", "shrub", "herb", "graminoid", "fern", "climber_woody", "climber"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
#dispersal
M <- as.table(rbind(c(3, 10, 18, 2, 18, 7, 9, 0, 19), c(9, 33, 39, 2, 29, 32, 21, 1, 48)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("zoochory","myrmecochory", "mixed", "hydrochory", "epizoochory", "endozoochory", "barochory", "ballistic", "anemochory"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
#history
M <- as.table(rbind(c(1, 83, 0, 2), c(1, 204, 1, 8)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("short_lived_perennial", "perennial", "biennial", "annual"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
#photosynthesis
M <- as.table(rbind(c(0, 15, 71), c(2, 16, 196)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("cam", "c4", "c3"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
#fire
M <- as.table(rbind(c(66, 18), c(182, 32)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("resprouting_possible", "fire_killed"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
#water
M <- as.table(rbind(c(19,67), c(20, 194)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("yes", "no"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
#I want to check out dispersal syndrome, but removing the 12 species that we could only code as zoochory
nozoo<-dplyr::filter(disp2, dispersal_syndrome != "zoochory")
p11 <- ggbarstats(
data = nozoo,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p11
extract_stats(p11)
M <- as.table(rbind(c(10, 18, 2, 18, 7, 9, 0, 19), c(33, 39, 2, 29, 32, 21, 1, 48)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("myrmecochory", "mixed", "hydrochory", "epizoochory", "endozoochory", "barochory", "ballistic", "anemochory"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
library(contingencytables)
#habit
M <- as.table(rbind(c(4, 4, 9, 29, 37, 0, 2, 1), c(35, 4, 48, 68, 43, 4, 5, 7)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("tree","subshrub", "shrub", "herb", "graminoid", "fern", "climber_woody", "climber"))
FisherFreemanHalton_asymptotic_test_rxc(M)
#dispersal (with zoochory excluded)
M <- as.table(rbind(c(10, 18, 2, 18, 7, 9, 0, 19), c(33, 39, 2, 29, 32, 21, 1, 48)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("myrmecochory", "mixed", "hydrochory", "epizoochory", "endozoochory", "barochory", "ballistic", "anemochory"))
FisherFreemanHalton_asymptotic_test_rxc(M)
M <- as.table(rbind(c(0, 15, 71), c(2, 16, 196)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("cam", "c4", "c3"))
FisherFreemanHalton_asymptotic_test_rxc(M)
#life history
M <- as.table(rbind(c(1, 83, 0, 2), c(1, 204, 1, 8)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("short_lived_perennial", "perennial", "biennial", "annual"))
FisherFreemanHalton_asymptotic_test_rxc(M)
#fire
M <- as.table(rbind(c(66, 18), c(182, 32)))
dimnames(M) <- list(gender = c("E", "P"),
party = c("resprouting_possible", "fire_killed"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residual
p5<-ggbarstats(
data = combined,
x = fire_response,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p5
extract_stats(p5)
p6<-ggbarstats(
data = combined,
x = water_association,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p6
extract_stats(p6)
p2<-ggbarstats(
data = combined,
x = growth_habit,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p2
extract_stats(p2)
p1 <- ggbarstats(
data = combined,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p1
extract_stats(p1)
p3<-ggbarstats(
data = combined,
x = life_history,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p3
extract_stats(p3)
p4<-ggbarstats(
data = combined,
x = photosynthetic_pathway,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p4
extract_stats(p4)
p5<-ggbarstats(
data = combined,
x = fire_response,
y = status
) +
labs(caption = NULL)+ theme_classic() + scale_fill_manual(values=cbPalette)
p5
extract_stats(p5)
p11 <- ggbarstats(
data = nozoo,
x = dispersal_syndrome,
y = status
) +
labs(caption = NULL) + theme_classic() + scale_fill_manual(values=cbPalette)
p11
extract_stats(p11)
